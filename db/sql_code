CREATE DATABASE DBsearchEngine;

CREATE TABLE search_engine.Word(
    ID INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,
    Token NVARCHAR(60) UNIQUE NOT NULL,
    CONSTRAINT C_Token CHECK(LENGTH(Token) >= 3)
);

CREATE TABLE search_engine.Link(
    ID INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,
    Address NVARCHAR(5000) UNIQUE NOT NULL,
    CONSTRAINT C_Path CHECK(Address <> '')
);

CREATE TABLE search_engine.LinksVisited(
    Address NVARCHAR(5000) UNIQUE NOT NULL,
    CONSTRAINT C_Path CHECK(Address <> '')
);

CREATE TABLE search_engine.WordLink(
	WordID INTEGER NOT NULL,
    LinkID INTEGER NOT NULL,
	Count INTEGER NOT NULL,
    FOREIGN KEY (WordID) REFERENCES Word (ID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (LinkID) REFERENCES Link (ID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT C_Count CHECK(Count > 0)
);

CREATE TABLE search_engine.Graph(
	Src INTEGER NOT NULL,
    Destination INTEGER NOT NULL,
    Count INTEGER NOT NULL,
    FOREIGN KEY (Src) REFERENCES Link (ID)
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (Destination) REFERENCES Link (ID)
        ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT G_Count CHECK(Count > 0)
);

 

DELIMITER //
CREATE PROCEDURE search_engine.graphInsert(IN src VARCHAR(5000), IN json_data LONGTEXT)
    BEGIN
        DECLARE src_id INT;
        DECLARE dis_id INT;
        DECLARE dis_address VARCHAR(5000);
        DECLARE count_val INT;
        DECLARE i INT DEFAULT 0;
        DECLARE sign int DEFAULT 0;

        SELECT count(*) INTO sign FROM LinksVisited WHERE Address = src;

        IF sign = 0 THEN
            INSERT IGNORE INTO Link (Address) VALUES (src);
            SELECT ID INTO src_id FROM Link WHERE Address = src;
        
            WHILE i < JSON_LENGTH(json_data) DO
                SET dis_address = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].address')));
                SET count_val = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].count')));
            
                INSERT IGNORE INTO Link (Address) VALUES (dis_address);
                SELECT ID INTO dis_id FROM Link WHERE Address = dis_address;
    
                INSERT IGNORE INTO Graph (Src, Destination, Count) VALUES (src_id, dis_id, count_val);

                SET i = i + 1;
            END WHILE; 
        END IF;
    END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE search_engine.wordLinkInsert(IN src VARCHAR(5000), IN json_data LONGTEXT)
    BEGIN
        DECLARE src_id INT;
        DECLARE newWord_id INT;
        DECLARE newWord VARCHAR(5000);
        DECLARE count_val INT;
        DECLARE i INT DEFAULT 0;
        DECLARE sign INT DEFAULT 0;

        SELECT COUNT(*) INTO sign FROM LinksVisited WHERE Address = src;
        
        IF sign = 0 THEN
			INSERT IGNORE into LinksVisited (Address) VALUES (src);
            
            INSERT IGNORE INTO Link (Address) VALUES (src);
            SELECT id INTO src_id FROM Link WHERE Address = src;
        
            WHILE i < JSON_LENGTH(json_data) DO
                SET newWord = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].word')));
                SET count_val = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].count')));

                INSERT IGNORE INTO Word (Token) VALUES (newWord);
                SELECT ID INTO newWord_id FROM Word WHERE Token = newWord;
    
                INSERT IGNORE INTO WordLink (WordID, LinkID, Count) VALUES (newWord_id, src_id, count_val);

                SET i = i + 1;
            END WHILE;

        END IF;

    END //
DELIMITER ;
 

DELIMITER //
CREATE PROCEDURE search_engine.insertWordsPages(IN json_data LONGTEXT)
BEGIN
	DECLARE json_pages LONGTEXT;
	DECLARE new_link VARCHAR(5000);
	DECLARE i INT DEFAULT 0;
     
	WHILE i < JSON_LENGTH(json_data) DO
		SET new_link = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].link')));
		SET json_pages = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].page')));
			
        CALL search_engine.wordLinkInsert(new_link, json_pages);
      
		SET i = i + 1;
	END WHILE;   
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE search_engine.inserLinksPages(IN json_data LONGTEXT)
BEGIN
	DECLARE json_pages LONGTEXT;
	DECLARE new_link VARCHAR(5000);
	DECLARE i INT DEFAULT 0;
     
	WHILE i < JSON_LENGTH(json_data) DO
		SET new_link = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].src')));
		SET json_pages = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].links')));
			
        CALL search_engine.graphInsert(new_link, json_pages);
      
		SET i = i + 1;
	END WHILE;   
END //
DELIMITER ;

